import time
import argparse
import os
import cv2
import numpy as np
from operator import itemgetter

import json
import openface

def search_face(input_face_path, database_path, json_results, verbose=False):
    start = time.time()

    fileDir = os.path.dirname(os.path.realpath(__file__))
    modelDir = os.path.join(fileDir, 'models')
    dlibModelDir = os.path.join(modelDir, 'dlib')
    openfaceModelDir = os.path.join(modelDir, 'openface')

    parser = argparse.ArgumentParser()
    parser.add_argument('imgs', type=str, nargs='+', help="Input images.")
    parser.add_argument('--dlibFacePredictor', type=str, help="Path to dlib's face predictor.",
                        default=os.path.join(dlibModelDir, "shape_predictor_68_face_landmarks.dat"))
    parser.add_argument('--networkModel', type=str, help="Path to Torch network model.",
                        default=os.path.join(openfaceModelDir, 'nn4.small2.v1.t7'))
    parser.add_argument('--imgDim', type=int,
                        help="Default image dimension.", default=96)
    parser.add_argument('--verbose', action='store_true')

    args = parser.parse_args()

    if verbose:
        print("Argument parsing and loading libraries took {} seconds.".format(
            time.time() - start))

    start = time.time()
    align = openface.AlignDlib(args.dlibFacePredictor)
    net = openface.TorchNeuralNet(args.networkModel, args.imgDim)
    if verbose:
        print("Loading the dlib and OpenFace models took {} seconds.".format(
            time.time() - start))

    def getRep(imgPath):
        if verbose:
            print("Processing {}.".format(imgPath))
        bgrImg = cv2.imread(imgPath)
        if bgrImg is None:
            raise Exception("Unable to load image: {}".format(imgPath))
        rgbImg = cv2.cvtColor(bgrImg, cv2.COLOR_BGR2RGB)

        if verbose:
            print("  + Original size: {}".format(rgbImg.shape))

        start = time.time()
        bb = align.getLargestFaceBoundingBox(rgbImg)
        if bb is None:
            raise Exception("Unable to find a face: {}".format(imgPath))
        if verbose:
            print("  + Face detection took {} seconds.".format(time.time() - start))

        start = time.time()
        alignedFace = align.align(args.imgDim, rgbImg, bb,
                                landmarkIndices=openface.AlignDlib.OUTER_EYES_AND_NOSE)
        if alignedFace is None:
            raise Exception("Unable to align image: {}".format(imgPath))
        if verbose:
            print("  + Face alignment took {} seconds.".format(time.time() - start))

        start = time.time()
        rep = net.forward(alignedFace)
        if verbose:
            print("  + OpenFace forward pass took {} seconds.".format(time.time() - start))
            print("Representation:")
            print(rep)
            print("-----\n")
        return rep

    similarity_results = []
    failed_images = []
    num_files_analyzed = 0

    for img2 in os.listdir(database_path):
        img2_path = os.path.join(database_path, img2)
        num_files_analyzed += 1
        try:
            rep1 = getRep(input_face_path)
            rep2 = getRep(img2_path)
            d = rep1 - rep2
            similarity_percentage = 100 * (1 - (np.dot(d, d) / 3))
            similarity_results.append({"img": img2, "per": "{:.2f}%".format(similarity_percentage)})
            if verbose:
                print("Comparando {} con {}.".format(input_face_path, img2_path))
                print(" + Porcentaje de Similitud: {:0.2f}%".format(similarity_percentage))
        except Exception as e:
            print("Error comparando {} con {}: {}".format(input_face_path, img2_path, str(e)))
            failed_images.append(img2_path)

    # Ordenar la lista de resultados por porcentaje de similitud (de mayor a menor)
    similarity_results.sort(key=lambda x: float(x["per"][:-1]), reverse=True)

    # Imprimir el tiempo tomado y el número de archivos analizados
    if verbose:
        print("\nTiempo tomado: {:.2f} segundos".format(time.time() - start))
        print("Número de archivos analizados: {}".format(num_files_analyzed))

    # Imprimir la lista ordenada
    if verbose:
        print("\nLista de Resultados de Similitud (de mayor a menor):")
        for i, result in enumerate(similarity_results, start=1):
            print(" Nro {}, Imagen: {}, Porcentaje: {}".format(i, result["img"], result["per"]))

    # Guardar el resultado en el archivo JSON
    with open(json_results, 'w') as json_file:
        json_file.write(json.dumps(similarity_results))

# Ejemplo de uso de la función
# search_face("path/to/input/image.jpg", "path/to/database", "output_results.json", verbose=True)
